
//現在の作業ディレクトリ(djangogirls)に Django をインストールする 
django-admin startproject mysite .

【実行後フォルダ構成】
djangogirls
├── manage.py　→　サイトの管理に役立つスクリプト。私たちのコンピュータ上でWebサーバーを起動することができる。
├── mysite
│   ├── __init__.py
│   ├── settings.py　→　ウェブサイトの設定が含まれています。
│   ├── urls.py　→　urlresolver（Djangoがビューを見つける仕組み。Django URLのチャプターで説明します）で使用されるパターンのリストが含まれています。
│   └── wsgi.py
├── myvenv
│   └── ...
└── requirements.txt

//setting.pyのタイムゾーン・言語の変更
TIME_ZONE = 'Asia/Tokyo'

LANGUAGE_CODE = 'ja'

//静的ファイルのパスの追加（setting.py）
//（静的ファイルとCSSについては、後ほどチュートリアルで説明します）。
//「STATIC_URL = 'static/'」の下に下記を追加
STATIC_ROOT = BASE_DIR / 'static'

//ALLOWED_HOSTSの設定変更
//DEBUG が True に設定されていて、ALLOWED_HOSTS が空のリストの時は、
//自動的に ['localhost', '127.0.0.1', '[::1]'] という3つのホストに対してチェックが行われます。 
//このままの設定では、これから私たちがデプロイして使う PythonAnywhere のホストネームが含まれていません。
//ですから、次のように設定を変更します。
//「ALLOWED_HOSTS = []」を下記に変更
ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']

//データベースのセットアップ
//Django がデフォルトで使う sqlite3 というデータベースを使うことにします。
//ブログのデータベース作成
python manage.py migrate

//Webサーバの起動
python manage.py runserver

//起動確認
//下記のURLをブラウザで開く。「インストールは成功しました！おめでとうございます！」の画面が出る
http://127.0.0.1:8000/

＊＊＊＊＊＊Djangoモデル＊＊＊＊＊＊
//新しいアプリケーションの作成
python manage.py startapp blog

【実行後フォルダ構成】
djangogirls
├── blog
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── db.sqlite3
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── myvenv
│   └── ...
└── requirements.txt

//アプリケーションを作ったら、Djangoにそれを使うように伝えないといけません。
mysite/settings.pyのINSTALLED_APPSに「'blog.apps.BlogConfig', 」を追加

//ブログポストモデルの作成
//blog/models.py ファイルで Model と呼ばれるオブジェクトを全て定義します。これがブログポストを定義する場所です。
//blog/models.pyの内容を全て削除し、下記を記載
from django.conf import settings
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

//データベースにモデルのためのテーブルを作成する
//最後のステップは新しいモデルをデータベースに追加することです。 まず、モデルに少し変更があったこと（今作ったこと）をDjangoに知らせましょう。
python manage.py makemigrations blog

//Djangoが作ってくれた移行ファイルを私たちがデータベースに追加すれば完了です。
python manage.py migrate blog

******Django admin******
//今作成したポストを追加、編集、削除するのにDjango adminを使います。
//blog/admin.pyを下記内容に書き換え
//←モデルをAdminページ（管理画面）上で見えるようにするため、admin.site.register(Post)でモデルを登録する必要があります。
from django.contrib import admin
from .models import Post 

admin.site.register(Post)

//ログインするには、superuser （サイトの全てを管理するユーザー）を作る必要があります。
python manage.py createsuperuser

id okiurasaki
pass sakiseyo93

